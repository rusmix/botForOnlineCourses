import { Telegraf, Context, Types, Markup } from "telegraf";
import "dotenv/config";
import { Users } from "../instances/user/model";
import { Update, Message, User } from "typegram";
import { Config as config } from "./config";
import { Messages } from "./Message";
import { convertToObject, createTextChangeRange } from "typescript";
import { error } from "console";
import { Schedules } from "./Schedule";
const fs = require("fs");
const path = require("path");

type BaseMessage = Update.New &
  Update.NonChannel &
  Message & {
    text?: string;
    forward_from?: User;
    voice?: unknown;
    sticker?: unknown;
    document?: unknown;
    photo?: unknown[];
    caption: string;
  };

type TgMessage = BaseMessage & {
  reply_to_message?: BaseMessage;
};

type TgAsset = {
  file_id: string;
};

export class BotStrategies {
  constructor(private readonly bot: Telegraf<Context>) {}

  Initialize() {
    this.bot.start((ctx: Context) => this.start(ctx));

    this.mongoSchedule();

    this.bot.hears(/\/help/, (ctx: Context) => this.getHelp(ctx));

    this.bot.hears(/\/clients/, (ctx: Context) => this.getClients(ctx));

    this.bot.hears(/\/sendhomework/, (ctx: Context) => this.sendHomework(ctx));

    this.bot.hears(/\/call/, (ctx: Context) => this.getCall(ctx));

    this.bot.hears(/\/homework/, (ctx: Context) => this.getHomework(ctx));

    this.bot.hears(/\/timetable/, (ctx: Context) => this.getTimetable(ctx));

    this.bot.hears(/\/sched/, (ctx: Context) => this.editSchedule(ctx));

    this.bot.on("message", (ctx: Context) => this.handleMessage(ctx));

    console.log("BotStrategies initialization ended.");
  }

  private async broadcast(ctx: Context) {
    const message = ctx.message as TgMessage;
    if (message.from.id !== Number(config.adminId)) return;
    console.log(message.text);
    try {
      // await Users.remove();
      const res = await Users.findAllTelegramIds();
      if (res.length === 0) {
        await this.bot.telegram.sendMessage(
          config.adminId,
          "–ù–∏–∫—Ç–æ –í–∞—Å –Ω–µ —Å–ª—ã—à–∏—Ç."
        );
        return;
      }
      console.log(res);
      let text = undefined;

      if ("text" in message) {
        text = message.text.replace("/broadcast", "\n");
      } else text = message.caption.replace("/broadcast", "\n");

      // text =
      //   message.text.replace("/broadcast", "") ||
      //   message.caption.replace("/broadcast", "");
      for (var i = 0; i < res.length; i++) {
        const msg = await this.bot.telegram.copyMessage(
          res[i],
          config.adminId,
          message.message_id
        );
        console.log(msg);
        if ("text" in message) {
          text = message.text.replace("/broadcast", "\n");
          await this.bot.telegram.editMessageText(
            res[i],
            msg.message_id,
            undefined,
            text
          );
        } else {
          text = message.caption.replace("/broadcast", "\n");
          await this.bot.telegram.editMessageCaption(
            res[i],
            msg.message_id,
            undefined,
            text
          );
        }
      }
      // await this.bot.telegram.copyMessage(userId, config.adminId, msgId);
    } catch (e) {
      this.errorHandler(e, config.adminId);
      console.log(e);
    }
  }

  private async sendHomework(ctx: Context) {
    const message = ctx.message as TgMessage;
    try {
      const userId = message.from.id;
      ctx.deleteMessage();
      await this.bot.telegram.sendMessage(
        userId,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å üòâ"
      );
    } catch (e) {
      console.log(e);
    }
  }

  private async editSchedule(ctx: Context) {
    const message = ctx.message as TgMessage;
    if (message.from.id !== Number(config.adminId)) return;
    try {
      const res = await Schedules.findOne();
      // console.log(res.id);
      const text = res.text;
      const command = message.text.split(" ")[1];
      const data = message.text.split(" ").slice(2).join(" ");
      console.log("DATA:", data);
      // this.bot.telegram.sendMessage(
      //   config.adminId,
      //   `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n${text.join("")}`
      // );
      if (command === "+") {
        text.push(data + "\n");
        console.log(text);
        await Schedules.updateOne({ _id: res.id }, { $set: { text: text } });
      }
      if (!isNaN(Number(command))) {
        const index = Number(command) - 1;
        if (data === "") {
          // console.log("AAA_____________")
          text.splice(index, 1);
        } else {
          text.splice(index, 1, data + "\n");
        }
        console.log(text);
        await Schedules.updateOne({ _id: res.id }, { $set: { text: text } });
      }
      this.bot.telegram.sendMessage(
        config.adminId,
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"
      );
    } catch (e) {
      console.log(e);
    }
  }

  private async getHelpForAdmin(ctx: Context) {
    try {
      await this.bot.telegram.sendMessage(
        config.adminId,
        "–≠—Ç–æ –ø–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" +
          "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–∑, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç –≤ –ª—é–±–æ–º –≤–∏–¥–µ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ –¥–∑, —Å—Ç–∞—Ä–æ–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏.\n\n" +
          "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–∞–∫ –º–æ–∂–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è —Å —É—á–µ–Ω–∏–∫–æ–º.\n\n" +
          "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –¥–∑ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ –Ω–æ–≤–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast <–∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç> <—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ>\n\n" +
          "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–∏—à–µ–º –≤—Å—ë —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n" +
          "/sched + <—Ç–µ–∫—Å—Ç>   - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç\n" +
          "/sched 12          - —É–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç\n" +
          "/sched 12 <—Ç–µ–∫—Å—Ç>  - –∑–∞–º–µ–Ω—è–µ—Ç –ø—É–Ω–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n" +
          "–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∫–æ–º–∞–Ω–¥–∞ /clients\n\n"
      );
    } catch (e) {
      console.log(e);
    }
  }

  private async getHelp(ctx: Context) {
    try {
      await ctx.deleteMessage();
      const userId = ctx.message.from.id;
      if (userId === Number(config.adminId)) return this.getHelpForAdmin(ctx);
      await this.bot.telegram.sendMessage(
        userId,
        "Don‚Äôt panic! \n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–∞ /timetable\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ - /homework\n–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –ü–æ–ª–∏–Ω–æ–π - /call\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç\n\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? - –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –∂–µ, –±–æ—Ç –ø—Ä–∏–≤–µ–¥—ë—Ç –ø–æ–º–æ—â—å)"
      );
    } catch (e) {
      console.log(e);
      ctx.reply("Unknown error accured: ", e.message);
    }
  }
  private async getClients(ctx: Context) {
    const message = ctx.message as TgMessage;
    if (message.from.id !== Number(config.adminId)) return;
    try {
      const res = await Users.find();
      let clients = [];
      for (let i = 0; i < res.length; i++) {
        clients.push({
          username: res[i].username,
          telegramId: res[i].telegramId,
        });
      }
      let text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n";
      for (let i = 0; i < res.length; i++) {
        if (clients[i].username === undefined)
          text =
            text +
            (i + 1) +
            ") –°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n–¢–µ–ª–µ–≥—Ä–∞–º ID: " +
            clients[i].telegramId +
            "\n\n";
        else
          text =
            text +
            (i + 1) +
            ") –°—Å—ã–ª–∫–∞: t.me/" +
            clients[i].username +
            "\n–¢–µ–ª–µ–≥—Ä–∞–º ID: " +
            clients[i].telegramId +
            "\n\n";
      }
      // console.log(text);
      // console.log(clients);
      await this.bot.telegram.sendMessage(config.adminId, text);
    } catch (e) {
      console.log(e);
    }
  }
  private async getTimetable(ctx: Context) {
    const userId = ctx.message.from.id;
    try {
      console.log("timetable");
      console.log(ctx);
      if (Number(config.adminId) === userId) {
        await this.getTimetableAdmin(ctx);
        return;
      }
      const res = await Schedules.findOne();
      const text = res.text;
      await this.bot.telegram.sendMessage(
        userId,
        `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n${text.join("")}`
      );
      await ctx.deleteMessage();
    } catch (e) {
      console.log(e);
      // ctx.reply("Unknown error accured: ", e.message);
    }
  }

  private async getTimetableAdmin(ctx: Context) {
    const userId = ctx.message.from.id;
    try {
      const res = await Schedules.findOne();
      let text = res.text;
      console.log(text);
      let newText = [];
      for (let i = 0; i < text.length; i++) {
        newText.push(`${i + 1}) ` + text[i]);
      }
      console.log(text);
      const msg = await this.bot.telegram.sendMessage(
        config.adminId,
        `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n${newText.join("")}`
      );
      console.log(msg);
      await ctx.deleteMessage();
    } catch (e) {
      console.log(e);
    }
  }

  private async getCall(ctx: Context) {
    try {
      const userId = ctx.message.from.id;
      await this.bot.telegram.sendMessage(userId, "–ò—â–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞!");
      await this.bot.telegram.sendMessage(
        config.adminId,
        "–ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è, –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 16.08 14:00 15:20_17.08 19:00_19.08 12:10"
      );
      await ctx.forwardMessage(config.adminId);
    } catch (e) {
      console.log(e);
    }
  }

  private async getHomework(ctx: Context) {
    try {
      const msgId = await Messages.findLastMessageTelegramId();
      const userId = ctx.message.from.id;
      if (!msgId) {
        await this.bot.telegram.sendMessage(userId, "–î–ó –ø–æ–∫–∞ –Ω–µ—Ç.");
        await ctx.deleteMessage();
        return;
      }
      await this.bot.telegram.sendMessage(userId, "–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –î–ó:");
      await this.bot.telegram.copyMessage(userId, config.adminId, msgId);
      await ctx.deleteMessage();
    } catch (e) {
      console.log(e);
    }
  }

  private async start(ctx: Context) {
    try {
      const message = ctx.message as TgMessage;
      const userId = message.from.id;
      await this.bot.telegram.sendMessage(
        userId,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å!\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç!"
      );
      if (String(userId) == config.adminId) return;
      await Users.createIfNotExists({
        telegramId: userId as unknown as string,
        username: message.from?.username,
        isBlocked: false,
      });
    } catch (e) {
      console.log(e);
      ctx.reply("Unknown error accured: ", e.message);
    }
  }

  private async handleMessage(ctx: Context) {
    try {
      console.log(ctx.message);
      if (String(ctx.message.from.id) == config.adminId)
        return this.handleMessageFromAdmin(ctx);
      return this.handleMessageFromUser(ctx);
    } catch (e) {
      console.log(e);
      ctx.reply("Unknown error accured: ", e.message);
    }
  }
  private async handleMessageFromAdmin(ctx: Context) {
    try {
      const message = ctx.message as any; //TgMessage;
      if (message.reply_to_message) {
        if ("text" in message.reply_to_message)
          if (message?.reply_to_message.text.split(" ")[0] == "/call")
            return this.replyAndGiveSchedule(ctx);
        return this.replyAndHelp(ctx);
      }
      if ("text" in message && message.text.split(" ")[0] == "/broadcast")
        return this.broadcast(ctx);
      if ("caption" in message && message.caption.split(" ")[0] == "/broadcast")
        return this.broadcast(ctx);
      return this.setHomework(ctx);
    } catch (e) {
      console.log(e);
    }
  }

  private async setHomework(ctx: Context) {
    try {
      const message = ctx.message as TgMessage;
      if ("text" in message && message.text[0] == "/") return;
      await Messages.createIfNotExists(message.message_id as unknown as string);
    } catch (e) {
      console.log(e);
    }
  }

  private async replyAndGiveSchedule(ctx: Context) {
    const message = ctx.message as TgMessage;
    try {
      const availableTime = message?.text.replace("_", "\n");
      const userId = String(message.reply_to_message.forward_from?.id);
      await this.bot.telegram.sendMessage(
        userId,
        `–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:\n${availableTime}\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å, –≤–æ —Å–∫–æ–ª—å–∫–æ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è, –∏ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–±–µ—Ä–∏—Ç–µ –ü–æ–ª–∏–Ω—É: t.me/pollebedeva`
      );
    } catch (e) {
      this.errorHandler(e, config.adminId);
    }
  }
  //451612433
  private async replyAndHelp(ctx: Context) {
    const message = ctx.message as TgMessage;
    try {
      if ("text" in message) {
        if (message.text[0] == "/") return;
      }
      if (String(message.from.id) != config.adminId) return;

      const userId = message.reply_to_message.forward_from?.id;

      await this.bot.telegram.copyMessage(
        userId,
        config.adminId,
        message.message_id
      );
    } catch (e) {
      // console.log("______catch______");
      console.log(e);
      this.errorHandler(e, config.adminId);
    }
  }

  private async errorHandler(e, userId) {
    try {
      console.log(e);
      if (e.response.error_code == 403) {
        await Users.deleteOne({ telegramId: e.on.payload.chat_id });
        await this.bot.telegram.sendMessage(
          config.adminId,
          "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã."
        );
      } else
        await this.bot.telegram.sendMessage(
          config.adminId,
          "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
        );
    } catch (e) {
      console.log(e);
    }
  }

  private async handleMessageFromUser(ctx: Context) {
    const message = ctx.message as TgMessage;
    try {
      if ("text" in message) if (message.text[0] == "/") return;
      return ctx.forwardMessage(config.adminId);
    } catch (e) {
      console.log(e);
      this.errorHandler(e, message.from.id);
    }
  }

  private async mongoSchedule() {
    try {
      // await Messages.remove();
      // await Users.remove();
      // await Schedules.remove();
      const res = await Schedules.find();
      // console.log(res[0].text);
      // console.log(res);
      if (res.length === 0) {
        console.log("empty, creating sample object");
        await new Schedules({
          text: [
            "17.08 - Zoom –≤ 19:00 –ø–æ –ú—Å–∫\n",
            "18.08 - –ü–∏—Å—å–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1\n",
            "20.08 - –ü–∏—Å—å–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2\n",
            "22.08 - –ü–∏—Å—å–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3\n",
            "18.08 - –ü–∏—Å—å–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1\n",
            "24.08 - Zoom –≤ 19:00 –ø–æ –ú—Å–∫\n",
          ],
        }).save();
        // console.log(res);
      }
    } catch (e) {
      console.log(e);
    }
  }
}
